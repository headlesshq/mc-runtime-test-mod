import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'java'
    id 'maven-publish'
    id 'xyz.wagyourtail.unimined' version '1.3.11'
    id 'systems.manifold.manifold-gradle-plugin' version '0.0.2-alpha'
    // TODO: do we want forgix?
    // id "io.github.pacifistmc.forgix" version "1.2.9"
}

def setupPreprocessors(List<String> mc_versions, int mc_index) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < mc_versions.size(); i++) {
        String verStr = mc_versions[i].replace(".", "_");
        sb.append("MC_" + verStr + "=" + i.toString() + "\n");
        if (mc_index == i) {
            sb.append("MC_VER=" + i.toString() + "\n");
        }
    }

    new File(projectDir, "build.properties").text = sb.toString()
}

project.gradle.ext.getProperties().each { prop ->
    rootProject.ext.set(prop.key, prop.value)
}

setupPreprocessors(rootProject.mc_versions, rootProject.mc_index)

manifold {
    manifoldVersion = rootProject.manifold_version
}

group 'io.github.headlesshq'
version "$minecraft_version-${project(':api').project_version}"

base {
    archivesName = 'mc-runtime-test'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

sourceSets {
    fabric {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    lexforge {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    if (project.loaders.contains('neoforge')) {
        neoforge
    }
}

repositories {
    maven {
        url = "https://maven.fabricmc.net/"
    }
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/maven"
    }
    maven {
        name = 'impactdevelopment-repo'
        url = 'https://impactdevelopment.github.io/maven/'
    }
    mavenCentral()
    maven {
        name = "wagyourtail releases"
        url = "https://maven.wagyourtail.xyz/releases"
    }
}

unimined.minecraft {
    version project.minecraft_version

    mappings {
        for (mapping in ((String) project.mappings).split(",")) {
            String[] split = mapping.split(':')
            String name = split[0]
            if (name == 'searge') {
                searge()
            } else if (name == 'mcp') {
                mcp("stable", split[1])
            } else if (name == 'mojmap') {
                mojmap()
                // intermediary()
                // yarn(1)
                devFallbackNamespace "mojmap"
            }
        }
    }

    defaultRemapJar = false
}

unimined.minecraft(sourceSets.fabric) {
    combineWith(sourceSets.main)

    if (project.loaders.contains('legacyfabric')) {
        legacyFabric {
            loader project.fabric_version
        }
    } else {
        fabric {
            loader project.fabric_version
        }
    }

    defaultRemapJar = true
}

if (project.loaders.contains('neoforge')) {
    unimined.minecraft(sourceSets.neoforge) {
        combineWith(sourceSets.main)

        neoForge {
            loader project.neoforge_version
            mixinConfig 'mc_runtime_test.mixins.json'
        }

        minecraftRemapper.config {
            ignoreConflicts(true)
        }

        defaultRemapJar = true
    }
}

unimined.minecraft(sourceSets.lexforge) {
    combineWith(sourceSets.main)

    minecraftForge {
        loader project.lexforge_version
        mixinConfig 'mc_runtime_test.mixins.json'
    }

    defaultRemapJar = true
}

configurations {
    mainImplementation
    implementation {
        extendsFrom lexforgeImplementation
        extendsFrom fabricImplementation
    }

    jarLibs
    implementation.extendsFrom jarLibs
}

sourceSets {
    main {
        compileClasspath += configurations.mainImplementation
        runtimeClasspath += configurations.mainImplementation
    }
}

dependencies {
    annotationProcessor("systems.manifold:manifold-preprocessor:${rootProject.manifold_version}")
    lexforgeAnnotationProcessor("systems.manifold:manifold-preprocessor:${rootProject.manifold_version}")
    fabricAnnotationProcessor("systems.manifold:manifold-preprocessor:${rootProject.manifold_version}")
    if (project.loaders.contains('neoforge')) {
        neoforgeAnnotationProcessor("systems.manifold:manifold-preprocessor:${rootProject.manifold_version}")
    }

    if (project.loaders.contains('legacyfabric')) {
        implementation 'net.minecraft:launchwrapper:1.12'
        jarLibs 'com.github.ImpactDevelopment:SimpleTweaker:1.2'
        // ewww, legaacy minecraft needs this
        // TODO: this could cause problems with 1.12.2 mods using newer versions
        //  they could just rename their jar to aaaaa-modname.jar though?
        jarLibs('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
            exclude module: 'launchwrapper'
            exclude module: 'guava'
            exclude module: 'gson'
            exclude module: 'commons-io'
        }
    } else {
        implementation('org.spongepowered:mixin:0.8.5') {
            exclude module: 'launchwrapper'
            exclude module: 'guava'
            exclude module: 'gson'
            exclude module: 'commons-io'
        }
    }

    // yes, I actually want this at runtime to use assertions!
    jarLibs 'org.junit.jupiter:junit-jupiter-api:5.10.1'
    jarLibs project(':api')
}

def mc_platforms = ['Fabric', 'Lexforge']
if (project.loaders.contains('neoforge')) {
    mc_platforms = ['Fabric', 'Neoforge', 'Lexforge']
}

for (String platform_capitalized : mc_platforms) {
    def platform = platform_capitalized.toLowerCase()
    def remapJarTask = tasks.named("remap${platform_capitalized}Jar", AbstractArchiveTask).get()
    def shadowTask = tasks.register("${platform}ShadowJar", ShadowJar) {
        dependsOn(remapJarTask)
        it.group = 'build'
        it.archiveClassifier = "${platform}-release"
        from remapJarTask.outputs
        it.configurations += [ project.configurations.jarLibs ]
        // Mixin is signed
        exclude 'META-INF/*.RSA'
        exclude 'META-INF/*.SF'
        exclude "**/module-info.class"
    }

    tasks.named('build') { finalizedBy(shadowTask) }
}


jar {
    enabled = false
}

tasks.withType(org.gradle.jvm.tasks.Jar).configureEach {
    from("LICENSE") {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        rename { "${it}_${project.archivesBaseName}" }
    }

    manifest {
        if (project.loaders.contains('legacyfabric')) {
            attributes(
                    'Implementation-Title': 'MC-Runtime-Test',
                    'TweakClass': 'io.github.headlesshq.mcrt.tweaker.McRuntimeTestTweaker',
                    'MixinConfigs': "mc_runtime_test.mixins.json",
                    'Implementation-Version': project.version,
            )
        } else { // no TweakClass
            attributes(
                    'Implementation-Title': 'MC-Runtime-Test',
                    'MixinConfigs': "mc_runtime_test.mixins.json",
                    'Implementation-Version': project.version,
            )
        }
    }
}

def expansions = [
    version    : project.version,
    mc_version : minecraft_version,
]

processFabricResources {
    filesMatching("fabric.mod.json") {
        expand expansions
    }
}

processLexforgeResources {
    filesMatching("META-INF/mods.toml") {
        expand expansions
    }

    filesMatching("mcmod.info") {
        expand expansions
    }
}

if (project.loaders.contains('neoforge')) {
    processNeoforgeResources {
        // TODO: this is legacy neoforge, newer neoforge needs the other toml, check if its ok to leave this in
        filesMatching("META-INF/mods.toml") {
            expand expansions
        }

        filesMatching("META-INF/neoforge.mods.toml") {
            expand expansions
        }
    }
}

afterEvaluate {
    publishing {
        publications {
            "${name.toLowerCase()}"(MavenPublication) {
                ((MavenPublication) it).groupId "${group}"
                ((MavenPublication) it).artifactId "${archivesBaseName.toLowerCase()}"
                ((MavenPublication) it).version "${version}"
                from components.java
                for (String platform: mc_platforms) {
                    String platform_lower = platform.toLowerCase()
                    artifact tasks.named("${platform_lower}Jar").get()
                    artifact tasks.named("remap${platform}Jar").get()
                    artifact tasks.named("${platform_lower}ShadowJar").get()
                }
            }
        }

        repositories {
            if (System.getenv('DEPLOY_TO_GITHUB_PACKAGES_URL') == null) {
                maven {
                    name = 'BuildDirMaven'
                    url = rootProject.projectDir.toPath().parent.resolve('build').resolve('maven')
                }
            } else {
                maven {
                    name = 'GithubPagesMaven'
                    url = System.getenv('DEPLOY_TO_GITHUB_PACKAGES_URL')
                    credentials {
                        username = System.getenv('GITHUB_USER')
                        password = System.getenv('GITHUB_TOKEN')
                    }
                }
            }
        }
    }
}
