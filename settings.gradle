
pluginManagement {
    repositories {
        mavenCentral()
        maven {
            url = "https://maven.neoforged.net/releases"
        }
        maven {
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            url = "https://maven.fabricmc.net/"
        }
        maven {
            url = "https://maven.wagyourtail.xyz/releases"
        }
        maven {
            url = "https://3arthqu4ke.github.io/maven"
        }
        maven {
            url = "https://maven.wagyourtail.xyz/snapshots"
        }
        maven {
            url = "https://repo.spongepowered.org/maven"
        }
        maven {
            url = "https://impactdevelopment.github.io/maven/"
        }
        gradlePluginPortal() {
            content {
                excludeGroup("org.apache.logging.log4j")
            }
        }
    }
    plugins {
        id "systems.manifold.manifold-gradle-plugin" version "0.0.2-alpha"
    }
}


def versionDirs = new File(rootDir, "versions").listFiles()
  .findAll { it.isDirectory() } // Filter only directories
  .findAll { new File(it, "build.gradle").exists() } // Filter directories containing build.gradle
  .collect { it.name } // Collect directory names

versionDirs.each { include ":versions:${it}" }
println("${versionDirs}")

def setupPreprocessors(List<String> mcVersions) {
    StringBuilder sb = new StringBuilder();
    mcVersions.eachWithIndex { ver, i ->
        String verStr = ver.replace(".", "_");
        sb.append("MC_${verStr}=${i}\n")
    }
    new File(rootDir, "build.properties").text = sb.toString()
}

def loadVersions(def directoryNames) {
    // Sort by semantic version
    def sortedVersions = directoryNames.sort { a, b ->
        def partsA = a.tokenize('.')*.toInteger()
        def partsB = b.tokenize('.')*.toInteger()

        int comparison = partsA[0] <=> partsB[0]
        if (comparison != 0) return comparison

        comparison = partsA[1] <=> partsB[1]
        if (comparison != 0) return comparison

        return partsA[2] <=> partsB[2]
    }

    //setupPreprocessors(sortedVersions)
    gradle.ext.mc_versions = sortedVersions
}

loadVersions(versionDirs)

include 'api'
include ':shared'
rootProject.name = 'mc-runtime-test'
